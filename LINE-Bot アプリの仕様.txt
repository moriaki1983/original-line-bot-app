LINE Botアプリの仕様

製品の概要：
LINEを使った、人間との自然な会話を目指したBotアプリケーション。

使用する技術＆製品：
①line-bot-sdk(クライアント端末にスマートフォンを想定しているので)。
②Python(Botの中核であるAIエンジンを組み込む必要があるので)。
③Flask(Python単体ではアプリケーションの短期開発は難しいので)。
④(本番・運用環境としては、)GCP(もしくはAWS)。
※(開発＆テスト環境としては、)Heroku。
⑤Postgres(もしくはSQLite3)(発話・メッセージ、ユーザー情報の登録・保存に使います)。
⑥Janome(発話・メッセージの形態素解析をする必要があるので)。



発話の意図するもの(＝インテント, intent)の分類：

表明(現在＆肯定)・・・「～する」等。
表明(現在＆否定)・・・「～しない」等。
表明(現在進行＆肯定)・・・「～している」「～しています」等。
表明(現在進行＆否定)・・・「～していない」「～していません」等。
表明(現在進行＆可能＆肯定)・・・「～できている」等。
表明(現在進行＆可能＆否定)・・・「～できていない」等。
表明(過去＆可能＝完了)・・・「～できた」「～できました」等。
表明(過去＆不可能＝未完了)・・・「～できていない」「～できていません」等。
表明(現在＆可能)・・・「～できます」「～できる(と思う, と思います)」等。
表明(現在＆不可能)・・・「～できない」「～できません」等。
表明(未来＆肯定)・・・「～しよう(と思う)」「～したい(と思う)」。等。
表明(未来＆否定)・・・「～しないと(思う)」「～したくない(と思う)」等。
表明(過去＆肯定)・・・「～した」「～しました」等。
表明(過去＆否定)・・・「～してない」「～していません」「～しませんでした」等
紹介＆説明＆提示・・・「(～は)～です」「((～は)～でした」等。
疑義＆質問・・・「～？」「～か？」「～ですか？」「～でしょうか？」等。
誘導＆勧誘・・・「～しよう(か?)」「～しましょう(か?)」等。
欲求＆欲動・・・「(～を)～したい(な, です)」「(～を)やりたい」等。
制止＆禁止・・・「(～を)するな」「(～を)しないよう(に)」等。
依頼・・・「(～を)して(ください)」等。
命令・・・「(～を)しろ」「(～を)しなさい」等。
挨拶・・・「こんにちは」「こんばんは」「やあ」「どうも」等。
称賛・・・「さすが(ですね)！」「素晴らしい！」等。
罵倒・・・「最低！」「バカ！」等。
称賛(半疑問)・・・「(あなたは)天才ですか？」等。
罵倒(半疑問)・・・「(あなたは)バカですか？」等。

その他
呼掛け・・・「おい」「ねぇ」「なぁ」等。
掛合い(コールアンドレスポンス)・・・「海！」等。※「山！」と答えるのが適当。
※さらに、各インテントには、「能動態」と「受動態」との別があります。



発話の意図されるもの(＝コンテント, content)の分類：

以下の通り、コンテントは、大きく２種類に分けられます。
「5W1H型」＝思考＆事実の優先＝比較的長文。
「紋切り＆言切り型」＝感情＆態度の優先＝比較的短文。
「5W1H型」は、その名の通り、「Who」「What」「When」「Where」「How」で、
相手に対して、自分の思考や、把握している事実を優先して表して、これを伝えます。
「紋切り＆言切り型」は、ワンワードであったり、セリフのようなもので、
相手に対して、自分の感情や態度を優先して表して、これを伝えます。



インテントの検出・抽出方法：

発話・メッセージを１次フィルターによって、書式整形します。
発話・メッセージの末尾の部分から助詞・助動詞を検出・抽出します。



コンテントの検出・抽出方法：

発話・メッセージからインテントを除去して、コンテントのみの状態とします。



会話の流れ(＝フロウ, conversation-of-flow)の推測・決定・生成の方法：

Botは、フロウをインテント(＝発話の型のようなもの)の組合せとして解釈します。
例えば、ユーザーの「表明」・・・「～する」に対しては、
「疑義＆質問」・・・「～？」「～か？」「～ですか？」で返すなど。
あらかじめ開発の段階で、いくつかの標準的な組合せをBotに実装しておきますが、
より実用的で自然な会話を実現するための、複雑なインテントの組合せについては、
Botの自己学習(＝機械学習)によって、運用の段階でBotに身に着けさせます。
『発話の意図するもの(＝インテント, intent)の分類』に示した通り、
会話とは、いくつかのインテントの組合せであると結論付けました。
まず、ユーザーの発話・メッセージは、インテントとコンテントに分けられます。
次いで、分解後のインテントから妥当と思われるフロウを推測して構成を決めます。
そして最後に、そのフロウに合致しそうなコンテントを推測して決定・生成します。
そのために、発話・メッセージの中から話題(＝トピック, topic)を取り出します。
※ここでいう「話題」とは、発話・メッセージの中で共通して現れる物事です。
※(言い換えれば、)文脈の中で繰り返して現れる名詞や語句を指します。
※「話題」こそが会話の文脈を決定づけます。



自己学習・機械学習アルゴリズムの実装の方法：

開発初期のプロトタイプには、「線形回帰モデル」等の簡易なものを使います。
※段階が進むにつれて、徐々に複雑な仕様の(より精度の高い)モデルに変更します。
挨拶などの極めて形式的な会話については、あらかじめ定義された形式に則ります。
確率(＝乱数サイ)を用いて、Botが送信する発話・メッセージを決定します。
数値範囲と発話・メッセージが対応する内容のテーブルを作成しておいて、
サイによって生成された数値とテーブルを突き合わせることで、これを決定します。
テーブルの見直しは、１セッションの区切り(＝一つの話題の終了)ごとに行います。
※テーブルをユーザーごとに用意することにより、特性に合わせた会話を実現します。
初回のセッションでは特性を分析できないので、乱数によってBotの動作を決めます。
※初回以降では、Botは、ユーザー特性に適合するように、学習を重ねていきます。
※セッションの区切り(＝テーブル見直し時)に応答パターンの見直しをします。
数値の範囲は、学習によってBot稼働時に動的に変更します。
※「1～100(ないし1000)」までの範囲で発話・メッセージに対応させます。
Botのプログラムは、マルコフモデルに基づきます。
※State(t_n)={(t_1)･(t_2)...(n-1)}; (マルコフモデルの式＝関数)
※「State()」は、Botの任意時点での状態を表す関数です。
※「t_n」は、時系列に沿って展開される状態値の番号です＝関数に与えられる引数。
GA(Genetic-Algorithm)を使って会話のパターンを生成します。
GAを使うことによって、適応的なメッセージのやり取りが実現できます。
※「会話のパターン」とは、一つの話題についての最小でも１往復のやりとりです。



その他の補足事項：

主語の欠落している文については、主語を「わたし(＝一人称)」で補完します。
流行り言葉やバズワード等については、ネット上のオンライン辞書で調べます。
既読スルー・無言については、なにも反応・動作(＝メッセージ返信)しません。
会話中にユーザーから意図しないメッセージ(＝フロウに適合しないもの)が、
発せられた場合には、「急に何ですか？」「どうしたのですか？」等を返します。
どの辞書にもないものや無意味なものについては、これを無視するかオウム返します。
基本的にユーザーに対しては受け身であり、こちらからはメッセージを送りません。
ユーザーからの一つのメッセージに対して、一つのメッセージを送ります(＝返信)。
一定の感情を持っているかのように振る舞い、感情の動きが返信に反映されます。
ユーザーの気質や性格的な傾向に合わせて、メッセージの内容を決定・生成します。
Botには、自己の存在を決定づける属性があり、会話の中でこれを参照することで、
あたかもBotに一定の性格・人格があるかの動作させます。※リストで実装する。
